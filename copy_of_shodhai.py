# -*- coding: utf-8 -*-
"""Copy of SHODHAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K_YsmEi0SChkHyULJyS6r-LvVzjDD86-

ANOOP KUMAR MISHRA
2023PCW5321@MNIT.AC.IN
anoopkumarmishra3875@gmail.com
8968343668

Problem Statement 1:
Solution
In the LLM and Generative  AI,
the capacity to produce conttextually appropraite dialoges is crucial research .
Evaluation
1.Minimum Data size reuirement
 (100 sets of dialogue ),(50-75 words )
2.Readability ,engaement,adaptation ,mitigation
3.efective of sales(product sale quantity)
4.Data generation
sales and customer conversation  
with Name Ram and Mohan as a i have taken example
 for better understand
 Ram: "Hello, Mohan! I noticed you're interested in our latest smartphone. It's packed with features like a high-resolution camera, long-lasting battery, and sleek design. What features are you looking for in a new phone?"

Mohan: "I'm mainly interested in a phone with a great camera and long battery life. Can you tell me more about the camera specifications?"

Ram: "Absolutely! Our latest model has a 108MP camera with advanced AI capabilities for stunning photos in any lighting. It also includes a 5000mAh battery that can easily last you through the day. How does that sound to you?"

Mohan: "That sounds impressive! What about the pricing and any ongoing promotions?"

Ram: "We have a special offer right now where you can get the phone at a 10% discount if you trade in your old device. Plus, we offer flexible payment plans to make it even more affordable. Would you like to proceed with the purchase?"

Mohan: "Yes, I think I'll go for it. Thank you for the information!"

Problem 2 ML application
we have to do code
"""

import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import matplotlib.pyplot as plt

data = torch.tensor([[0, 0], [0, 1], [1, 0], [1, 1]], dtype=torch.float32)
labels = torch.tensor([[0], [1], [1], [0]], dtype=torch.float32)

class XORNet(nn.Module):
    def __init__(self):
        super(XORNet, self).__init__()
        self.fc1 = nn.Linear(2, 2)
        self.fc2 = nn.Linear(2, 1)

    def forward(self, x):
        x = torch.sigmoid(self.fc1(x))
        x = torch.sigmoid(self.fc2(x))
        return x

model = XORNet()
criterion = nn.BCELoss()
optimizer = optim.SGD(model.parameters(), lr=0.1)

epochs = 10000
for epoch in range(epochs):
    optimizer.zero_grad()
    outputs = model(data)
    loss = criterion(outputs, labels)
    loss.backward()
    optimizer.step()
    if (epoch+1) % 1000 == 0:
        print(f'Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.4f}')

with torch.no_grad():
    predicted = model(data).round()
    print("Predicted:\n", predicted)
    print("Actual:\n", labels)

def plot_decision_boundary(model, data, labels):
    x_min, x_max = data[:, 0].min() - 0.1, data[:, 0].max() + 0.1
    y_min, y_max = data[:, 1].min() - 0.1, data[:, 1].max() + 0.1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
    grid = np.c_[xx.ravel(), yy.ravel()]
    with torch.no_grad():
        grid_tensor = torch.tensor(grid, dtype=torch.float32)
        zz = model(grid_tensor).numpy().reshape(xx.shape)
    plt.contourf(xx, yy, zz, cmap="coolwarm", alpha=0.8)
    plt.scatter(data[:, 0], data[:, 1], c=labels[:, 0], cmap="coolwarm", edgecolors='k')
    plt.title("Decision Boundary for XOR Gate")
    plt.xlabel("Input 1")
    plt.ylabel("Input 2")
    plt.show()

plot_decision_boundary(model, data.numpy(), labels.numpy())

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt

transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])

trainset = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)

testset = torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=False)

class MNISTNet(nn.Module):
    def __init__(self):
        super(MNISTNet, self).__init__()
        self.fc1 = nn.Linear(28*28, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 10)

    def forward(self, x):
        x = x.view(-1, 28*28)
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

model = MNISTNet()
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)

epochs = 5
loss_values = []
for epoch in range(epochs):
    running_loss = 0.0
    for images, labels in trainloader:
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
    avg_loss = running_loss / len(trainloader)
    loss_values.append(avg_loss)
    print(f'Epoch [{epoch+1}/{epochs}], Loss: {avg_loss:.4f}')

correct = 0
total = 0
with torch.no_grad():
    for images, labels in testloader:
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print(f'Accuracy: {100 * correct / total:.2f}%')

plt.plot(range(epochs), loss_values, label='Training Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Loss over Epochs')
plt.legend()
plt.show()