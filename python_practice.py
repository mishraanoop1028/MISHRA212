# -*- coding: utf-8 -*-
"""PYTHON PRACTICE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zMCGL1RqdNdgMgeheQNyAzC0Ado96A21
"""

def is_palindrome(s):
    return s == s[::-1]

# Example
print(is_palindrome("racecar"))  # Output: True

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def merge_two_lists(l1, l2):
    dummy = ListNode()
    tail = dummy
    while l1 and l2:
        if l1.val < l2.val:
            tail.next = l1
            l1 = l1.next
        else:
            tail.next = l2
            l2 = l2.next
        tail = tail.next
    tail.next = l1 if l1 else l2
    return dummy.next

# Example usage: Create lists and call merge_two_lists(l1, l2)

def max_subarray_sum(nums):
    max_current = max_global = nums[0]
    for num in nums[1:]:
        max_current = max(num, max_current + num)
        if max_current > max_global:
            max_global = max_current
    return max_global

# Example
print(max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]))  # Output: 6

def reverse_string(s):
    return s[::-1]

# Example
print(reverse_string("ANOOPMISHRA"))  # Output: "olleh"

def is_palindrome(s):
    return s == s[::-1]

# Example
print(is_palindrome("cikvic"))  # Output: True

def find_missing_number(nums):
    n = len(nums)
    total = (n * (n + 1)) // 2
    return total - sum(nums)

# Example
print(find_missing_number([3, 0, 1]))  # Output: 2